/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment.FinanceManager;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import assignment.FileHandler;

import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Admin
 */
public class approvePayment extends javax.swing.JFrame {
  FinanceManager financeManager = new FinanceManager();

  /**
   * Creates new form approvePayment
   */
  public approvePayment() {
    initComponents();
    loadTable();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(950, 600));

        jPanel2.setBackground(new java.awt.Color(0, 255, 204));

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jButton8.setText("<");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton1.setText("Approve Payment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setText("Check Stock Status");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("Manage Supplier Payment");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton8)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PO ID", "Item Name", "Quantity", "Status", "Req ID", "Date Before", "Item ID", "Sup ID", "Price per Item"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Verify and Approve Payment");

        jButton9.setText("Approve");

        jButton10.setText("Reject");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jButton9))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
    approvePayment approvePaymentFrame = new approvePayment();
    approvePaymentFrame.setVisible(true);
    approvePaymentFrame.pack();
    approvePaymentFrame.setLocationRelativeTo(null);
    this.dispose();
  }// GEN-LAST:event_jButton1ActionPerformed

  private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton6ActionPerformed
    checkStockStatus checkStockStatusFrame = new checkStockStatus();
    checkStockStatusFrame.setVisible(true);
    checkStockStatusFrame.pack();
    checkStockStatusFrame.setLocationRelativeTo(null);
    this.dispose();
  }// GEN-LAST:event_jButton6ActionPerformed

  private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton4ActionPerformed
    manageSupplierPayment manageSupplierPaymentFrame = new manageSupplierPayment();
    manageSupplierPaymentFrame.setVisible(true);
    manageSupplierPaymentFrame.pack();
    manageSupplierPaymentFrame.setLocationRelativeTo(null);
    this.dispose();
  }// GEN-LAST:event_jButton4ActionPerformed



  private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton8ActionPerformed
    financeManagerPage financeManagerFrame = new financeManagerPage();
    financeManagerFrame.setVisible(true);
    financeManagerFrame.pack();
    financeManagerFrame.setLocationRelativeTo(null);
    this.dispose();
  }// GEN-LAST:event_jButton8ActionPerformed

  private void loadTable() {
    List<String[]> requisitionData = financeManager.approvePayment();

    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);

    for (String[] row : requisitionData) {
      model.addRow(row);
    }
  }

  private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton10ActionPerformed
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
      JOptionPane.showMessageDialog(this, "Please select a purchase order to reject", "No Selection",
          JOptionPane.WARNING_MESSAGE);
      return;
    }

    // Get current status
    String currentStatus = jTable1.getValueAt(selectedRow, 3).toString();

    if (currentStatus.equals("Rejected")) {
      JOptionPane.showMessageDialog(this, "Cannot reject a rejected purchase order", "Action Not Allowed",
          JOptionPane.WARNING_MESSAGE);
      return;
    }

    // Get purchase order
    String purchaseOrder = jTable1.getValueAt(selectedRow, 0).toString();

    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to reject purchase order " + purchaseOrder + "?",
        "Confirm Rejection", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
          updatePurchaseOrderStatus(purchaseOrder, "Rejected");
        }
  }// GEN-LAST:event_jButton10ActionPerformed

  private void updatePurchaseOrderStatus(String purchaseOrderId, String newStatus) {
    try {
      FinanceManager financeManager = new FinanceManager();
      List<String[]> purchaseOrderData = financeManager.approvePayment();
      boolean found = false;

      if (newStatus.equals("Rejected")) {
          // Remove the rejected purchase order from purchOrder.txt only
          removePurchaseOrderRow(purchaseOrderId);
          found = true;
      } else {
          // Update the status for non-rejected cases (e.g., Approved)
          List<String> updatedRecords = new ArrayList<>();
          for (String[] row : purchaseOrderData) {
              if (row[0].trim().equals(purchaseOrderId)) {
                  row[3] = newStatus; // Update the status
                  found = true;
              }
              StringBuilder record = new StringBuilder();
              for (int i = 0; i < row.length; i++) {
                  record.append(row[i]);
                  if (i < row.length - 1) {
                      record.append(",");
                  }
              }
              updatedRecords.add(record.toString());
          }

          if (found) {
              try {
                  writeRecords(updatedRecords); // Only writes for non-rejected updates
              } catch (Exception e) {
                  JOptionPane.showMessageDialog(this, "Error updating purchase order status: " + e.getMessage(),
                      "Error", JOptionPane.ERROR_MESSAGE);
              }
          }
      }

      loadTable(); // Reload table after changes
      if (found && newStatus.equals("Rejected")) {
          JOptionPane.showMessageDialog(this, "Purchase Order " + purchaseOrderId + " has been rejected and removed.",
              "Rejection Successful", JOptionPane.INFORMATION_MESSAGE);
      } else if (found) {
          JOptionPane.showMessageDialog(this, "Purchase Order " + purchaseOrderId + " has been " + newStatus.toLowerCase(),
              "Status Updated", JOptionPane.INFORMATION_MESSAGE);
      }
  } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Error updating purchase order status: " + e.getMessage(), "Error",
          JOptionPane.ERROR_MESSAGE);
  }
}

  private void writeRecords(List<String> records) {
    try {
      FileHandler fileHandler = new FileHandler("src/assignment/database/approvedPurchaseOrder.txt");
      fileHandler.writeRecords(records);
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Purchase Order status could not be updated: " + e.getMessage(), "Error",
          JOptionPane.ERROR_MESSAGE);
    }
  }


  

  private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton9ActionPerformed
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
      JOptionPane.showMessageDialog(this, "Please select a Purchase Order to approve", "No Selection",
          JOptionPane.WARNING_MESSAGE);
      return;
    }

    // Get current status
    String currentStatus = jTable1.getValueAt(selectedRow, 3).toString();

    if (currentStatus.equals("Rejected")) {
      JOptionPane.showMessageDialog(this, "Cannot approve a rejected Purchase Order", "Action Not Allowed",
          JOptionPane.WARNING_MESSAGE);
      return;
    }

    // Get Purchase Order
    String purchaseOrder = jTable1.getValueAt(selectedRow, 0).toString();

    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to approve Purchase Order " + purchaseOrder + "?",
        "Confirm Approval", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
      try {
        String[] rowData = new String[jTable1.getColumnCount()];
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
          rowData[i] = jTable1.getValueAt(selectedRow, i).toString();
        }   

       rowData[3] = "Approved";

      appendToApprovePurchaseOrder(rowData);

      removePurchaseOrderRow(rowData[0]);

      loadTable();
      JOptionPane.showMessageDialog(this,
            "Purchase Order " + rowData[0] + " has been approved and move to Purchase Order",
            "Success",
             JOptionPane.INFORMATION_MESSAGE);  
          } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Purchase Order status could not be updated: " + e.getMessage(), "Error",
                JOptionPane.ERROR_MESSAGE);
          }
        }
  }// GEN-LAST:event_jButton9ActionPerformed

  private void removePurchaseOrderRow(String poId) {
    try {
      FileHandler fileHandler = new FileHandler("src/assignment/database/purchOrder.txt");
      List<String> lines = fileHandler.readRecords();

      lines.removeIf(line -> line.startsWith(poId + ","));

      fileHandler.writeRecords(lines);
    } catch (Exception e) {
      throw new RuntimeException("Purchase Order status could not be updated: " + e.getMessage());
    }
  }

  private void appendToApprovePurchaseOrder(String[] rowData) {
    try {
      FileHandler fileHandler = new FileHandler("src/assignment/database/approvedPurchaseOrder.txt");

      StringBuilder record = new StringBuilder();
      for (int i = 0; i < rowData.length; i++) {
        record.append(rowData[i]);
        record.append(","); // Add a comma after each column value
    }
    record.append("Payment Approved"); // Add the new "Payment Status" column with "Approved"

    fileHandler.appendRecord(record.toString());
    } catch (Exception e) {
      JOptionPane.showMessageDialog(this, "Purchase Order status could not be updated: " + e.getMessage(), "Error",
          JOptionPane.ERROR_MESSAGE);
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
    // (optional) ">
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the default
     * look and feel.
     * For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(approvePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(approvePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(approvePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(approvePayment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    // </editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new approvePayment().setVisible(true);
      }
    });
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
